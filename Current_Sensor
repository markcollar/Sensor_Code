/* Updated version of Energy_Monitor
Removed EmonLib, added only needed functions "calcIrms" and "readVcc" from the library
Added debug with LCD
*/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27, 20x4 LCD

//#define DEBUG   // Uncomment for LCD debug

int inPinI = 1;      //from CT circuit
int sampleI;
double filteredI;
double offsetI = 512;   
double sqI;
double sumI;
double ICAL = 62.1;   // CT turns ratio divided by Burden resistor value
double Irms;

void setup()
{  
  Serial.begin(9600);
  #ifdef DEBUG
  lcd.init();
  lcd.backlight();
  lcd.clear();
  #endif
}

void loop()
{
  Irms = calcIrms(1480);  
  Serial.println(Irms);		       
  
  #ifdef DEBUG
  lcd.setCursor(0,0);
  lcd.print("Current: ");
  lcd.print(Irms);
  #endif
}

//-----------------------------------------------------------------

double calcIrms(unsigned int Number_of_Samples)
{   
  int SupplyVoltage = readVcc();
   
  for (unsigned int n = 0; n < Number_of_Samples; n++)
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
	//  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
	filteredI = sampleI - offsetI;

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (1024));
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 

  //Reset accumulators
  sumI = 0;
  
  return Irms;
}

//------------------------------------------------------------------

long readVcc() {
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference
  #if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
    ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
    ADMUX = _BV(MUX5) | _BV(MUX0);
  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
    ADMUX = _BV(MUX3) | _BV(MUX2);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #endif  

  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
  while (bit_is_set(ADCSRA,ADSC)); // measuring

  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  
  uint8_t high = ADCH; // unlocks both

  long result = (high<<8) | low;

  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  return result; // Vcc in millivolts
}
